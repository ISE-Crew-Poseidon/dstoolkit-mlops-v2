
parameters:
- name: environmentName
  type: string
- name: azureMgrConnection
  type: string
- name: resourceGroup
  type: string
- name: location
  type: string     
- name: storageAccount
  type: string
- name: keyVaultName
  type: string
- name: appInsightsName  
  type: string
- name: containerRegistryName  
  type: string
- name: amlWorkspaceName  
  type: string   
- name: requiresPrivateWorkspace  
  type: string
  default: 'false'
- name: virtualNetworkName  
  type: string
  default: 'undefined'
- name: privateDnsZoneName  
  type: string
  default: 'undefined'
- name: privateDnsZoneLinkName  
  type: string
  default: 'undefined'
- name: privateDnsZoneGroupName  
  type: string
  default: 'undefined'
- name: privateEndpointName  
  type: string
  default: 'undefined'
- name: clusterName  
  type: string
  default: 'commandmachine1'
- name: clusterSize  
  type: string
  default: 'STANDARD_DS3_v2'
  
stages:
  - stage: publish_IaC_templates
    displayName: Publish IaC Templates
    jobs:
    - job: Publish_IaC_Templates
      steps:
          - checkout: self
            clean: true
          - task: CopyFiles@2
            displayName: 'Copy templates'
            inputs:
              sourceFolder: '$(Pipeline.Workspace)/s'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
            enabled: true

          - publish: '$(Build.ArtifactStagingDirectory)'
            artifact: infratemplates 
            enabled: true

  - stage: deploy_mlops_infrastructure
    displayName: Deploy MLOps Infrastructure
    dependsOn:
      - infra_variable_generation
      - publish_IaC_templates
    variables:
      - template: templates/infra_bicep_variables.yml
    jobs:
    - job: Deploy_MLOps_v2_Infrastructure  
      steps:
      - download: current
        artifact: infratemplates

      - script: |
          echo 'See the contents of parameters passed in'
          echo '${{parameters.azureMgrConnection}}'
          echo '${{parameters.environmentName}}'
          echo '${{parameters.resourceGroup}}'
          echo '${{parameters.location}}'
          echo '${{parameters.storageAccount}}'
          echo '${{parameters.keyVaultName}}'
          echo '${{parameters.appInsightsName}}'
          echo '${{parameters.containerRegistryName}}'
          echo '${{parameters.amlWorkspaceName}}'
          echo '${{parameters.requiresPrivateWorkspace}}'
          echo '${{parameters.privateDnsZoneName}}'
          echo '${{parameters.virtualNetworkName}}'
          echo '${{parameters.privateDnsZoneLinkName}}'
          echo '${{parameters.privateDnsZoneGroupName}}'
          echo '${{parameters.privateEndpointName}}'
          echo '${{parameters.clusterName}}'
          echo '${{parameters.clusterSize}}'
        enabled: true

      - task: AzureCLI@2
        displayName: Provision MLOps Infrastructure
        inputs:
          azureSubscription: '${{parameters.azureMgrConnection}}'
          scriptType: pscore
          scriptLocation: inlineScript
          useGlobalConfig: false
          inlineScript: |
            az --version
            if('${{parameters.requiresPrivateWorkspace}}' -eq 'false'){
              az deployment group create --resource-group '${{parameters.resourceGroup}}' `
              --template-file '$(Pipeline.Workspace)/infratemplates/infra/bicep/main.bicep' `
              --parameters location='${{parameters.location}}' `
              storageAccount='${{parameters.storageAccount}}' `
              keyVaultName='${{parameters.keyVaultName}}' `
              appInsightsName='${{parameters.appInsightsName}}' `
              containerRegistryName='${{parameters.containerRegistryName}}' `
              amlWorkspaceName='${{parameters.amlWorkspaceName}}'
            }
            else {
              az deployment group create --resource-group '${{parameters.resourceGroup}}' `
              --template-file '$(Pipeline.Workspace)/infratemplates/infra/bicep/main.bicep' `
              --parameters location='${{parameters.location}}' `
              storageAccount='${{parameters.storageAccount}}' `
              keyVaultName='${{parameters.keyVaultName}}' `
              appInsightsName='${{parameters.appInsightsName}}' `
              containerRegistryName='${{parameters.containerRegistryName}}' `
              amlWorkspaceName='${{parameters.amlWorkspaceName}}' `
              virtualNetworkName='${{parameters.virtualNetworkName}}' `
              privateDnsZoneName='${{parameters.privateDnsZoneName}}' `
              privateDnsZoneLinkName='${{parameters.privateDnsZoneLinkName}}' `
              privateDnsZoneGroupName='${{parameters.privateDnsZoneGroupName}}' `
              privateEndpointName='${{parameters.privateEndpointName}}' `
              requiresPrivateWorkspace='${{parameters.requiresPrivateWorkspace}}'
            }
        enabled: true

      - task: AzureCLI@2
        displayName: Add compute to workspace
        inputs:
          azureSubscription: '${{parameters.azureMgrConnection}}'
          scriptType: pscore
          scriptLocation: inlineScript
          useGlobalConfig: false
          inlineScript: |
            az --version
            az extension add -n ml -y
            az ml compute create --name '${{parameters.clusterName}}' --size '${{parameters.clusterSize}}' `
            --type AmlCompute --resource-group '${{parameters.resourceGroup}}' --workspace-name '${{parameters.amlWorkspaceName}}'
        enabled: true

      - task: AzureCLI@2
        displayName: Add Key Vault access policy to service principal backing service connection
        inputs:
          azureSubscription: '${{parameters.azureMgrConnection}}'
          scriptType: pscore
          addSpnToEnvironment: true
          scriptLocation: inlineScript
          useGlobalConfig: false
          inlineScript: |
            az --version
            $id = (az ad sp show --id $env:servicePrincipalId --query id)
            az keyvault set-policy --name ${{parameters.keyVaultName}} --object-id $id --secret-permissions get list
        enabled: true              