parameters:
- name: azureMgrConnection
  type: string
- name: resourceGroup
  type: string
- name: keyVaultName
  type: string
- name: amlWorkspaceName  
  type: string   
- name: clusterName  
  type: string
- name: clusterSize  
  type: string
  default: 'STANDARD_DS3_v2'
- name: namespace  
  type: string
  default: 'mlops'
- name: projectcode  
  type: string
  default: 'dstk'
- name: version  
  type: string      
  
stages:

  - stage: deploy_mlops_infrastructure
    displayName: Deploy MLOps Infrastructure
    dependsOn:
      - infra_variable_generation
    variables:
      - template: templates/infra_bicep_variables.yml
    jobs:
    - job: Deploy_MLOps_v2_Infrastructure  
      steps:
      - script: |
          echo 'See the contents of parameters passed in'
          echo '${{parameters.azureMgrConnection}}'
          echo '${{parameters.resourceGroup}}'
          echo '${{parameters.keyVaultName}}'
          echo '${{parameters.amlWorkspaceName}}'
          echo '${{parameters.clusterName}}'
          echo '${{parameters.clusterSize}}'
          echo '${{parameters.namespace}}'
          echo '${{parameters.projectcode}}'
          echo '${{parameters.version}}'

        enabled: true

      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
        displayName: 'Terraform Install'
        inputs:
          terraformVersion: 'latest'


      - task: TerraformTaskV4@4
        displayName: 'Terraform Init'
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infra/terraform/public_workspace'
          backendServiceArm: '${{parameters.azureMgrConnection}}'
          ensureBackend: true
          backendAzureRmResourceGroupName: '${{parameters.resourceGroup}}'
          backendAzureRmStorageAccountName: stacctfstatemlopsv2010 
          backendAzureRmContainerName: terraform
          backendAzureRmKey: mlops.tfstate
        enabled: true

      - task: TerraformTaskV4@4
        displayName: 'Terraform Validate'
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infra/terraform/public_workspace'
        enabled: true

      - task: TerraformTaskV4@4
        displayName: 'Terraform Plan'
        inputs:
          command: 'plan -var basename="${{parameters.namespace}}" -var project_code="${{parameters.projectcode}}" -var version_num="${{parameters.version}}" -var rg-name="${{parameters.resourceGroup}}"'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infra/terraform/public_workspace'
          allowTelemetryCollection: true
          environmentServiceNameAzureRM: '${{parameters.azureMgrConnection}}'
          commandOptions: '-out=tfplan'
        enabled: true

      - task: TerraformTaskV4@4
        displayName: 'Terraform Apply'
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/infra/terraform/public_workspace'
          environmentServiceNameAzureRM: '${{parameters.azureMgrConnection}}'
          commandOptions: '-auto-approve -input=false  tfplan'
        enabled: true

      - task: AzureCLI@2
        displayName: Add compute to workspace
        inputs:
          azureSubscription: '${{parameters.azureMgrConnection}}'
          scriptType: pscore
          scriptLocation: inlineScript
          useGlobalConfig: false
          inlineScript: |
            az --version
            az extension add -n ml -y
            az ml compute create --name '${{parameters.clusterName}}' --size '${{parameters.clusterSize}}' `
            --type AmlCompute --resource-group '${{parameters.resourceGroup}}' --workspace-name '${{parameters.amlWorkspaceName}}'
        enabled: true

      - task: AzureCLI@2
        displayName: Add Key Vault access policy to service principal backing service connection
        inputs:
          azureSubscription: '${{parameters.azureMgrConnection}}'
          scriptType: pscore
          addSpnToEnvironment: true
          scriptLocation: inlineScript
          useGlobalConfig: false
          inlineScript: |
            az --version
            $id = (az ad sp show --id $env:servicePrincipalId --query id)
            az keyvault set-policy --name ${{parameters.keyVaultName}} --object-id $id --secret-permissions get list
        enabled: true  
