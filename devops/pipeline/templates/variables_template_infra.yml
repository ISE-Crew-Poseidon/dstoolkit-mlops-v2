stages:
- stage: infra_variable_generation
  jobs:
  - job: load_infra_config_variables
    steps:
    - powershell: |
        $json = Get-Content -Raw -Path '$(System.DefaultWorkingDirectory)/config/infra_config.json' | ConvertFrom-Json
        $firstElement = $json.infra | Select-Object -First 1
        
        Write-Host $firstElement.KEYVAULT_NAME
        
        foreach ($property in $firstElement.PSObject.Properties) {
          $pname = $property.Name
          $pvalue = $property.Value
          if ($pname -eq 'NAMESPACE'){
            $namespace = $pvalue
          }
          if ($pname -eq 'PROJECTCODE'){
            $projectcode = $pvalue
          }
          if ($pname -eq 'VERSION'){
            $version = $pvalue
          }

          if ($pname -eq 'KEYVAULT_NAME'){
            $keyvaultname = akvaml$(namespace)$(projectcode)$(version)
            Write-Output "##vso[task.setvariable variable=$pname;isoutput=true]$keyvaultname" 
            Write-Host $pname, $keyvaultname
          }
          else {
            Write-Output "##vso[task.setvariable variable=$pname;isoutput=true]$pvalue"
            Write-Host $pname, $pvalue
          }  
        }
      name: loading_infra_config

      
  - job: validate_assign_infra_variables
    dependsOn: load_infra_config_variables
    variables:
    - name: NAMESPACE
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.NAMESPACE'] ]
    - name: PROJECTCODE
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.PROJECTCODE'] ]
    - name: VERSION
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.VERSION'] ]
    - name:  AZURE_RM_SVC_CONNECTION
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.AZURE_RM_SVC_CONNECTION'] ]       
    - name:  ENVIRONMENT
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.ENVIRONMENT'] ]       
    - name:  LOCATION
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.LOCATION'] ]       
    - name:  KEYVAULT_NAME
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.KEYVAULT_NAME'] ]       
    - name:  REGISTRY_NAME
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.CONTAINERREGISTRY'] ] 
    - name:  RESOURCE_GROUP_NAME
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.RESOURCE_GROUP_NAME'] ]
    - name:  WORKSPACE_NAME
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.AMLWORKSPACE'] ]
    - name: STORAGEACCOUNT
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.STORAGEACCOUNT'] ]
    - name: APPINSIGHTS
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.APPINSIGHTS'] ]
    - name: CLUSTER_NAME
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.CLUSTER_NAME'] ]
    - name: CLUSTER_SIZE
      value: $[ dependencies.load_infra_config_variables.outputs['loading_infra_config.CLUSTER_SIZE'] ]

    steps:
    - script: |
        if [ -z "$(REGISTRY_NAME)" ]
        then
          echo "variables are not available. Check parameter values or config json file for valid values.."
          exit 1
        else
          echo "variables were loaded from config file.."
          printenv
        fi
      name: validate_variable_load

          
